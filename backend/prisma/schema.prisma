// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id                          String          @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  username                    String
  email                       String?         @unique
  emailVerified               Boolean?
  image                       String?
  country                     String?
  city                        String?
  verifiedToken               String?
  resetPasswordToken          String?
  isAdmin                     Boolean?
  password                    String?
  createdAt                   DateTime        @default(now())
  verifiedTokenExpiresAt      DateTime?
  resetPasswordTokenExpiresAt DateTime?
  updatedAt                   DateTime        @updatedAt
  ratings                     Int?
  product                     Product[]
  payment                     Payment[]       @relation("SellerPayments")
  paymentsMade                Payment[]       @relation("UserPayments")
  reviews                     Review[]        @relation("SellerReviews")
  reviewsMade                 Review[]        @relation("UserReview")
  notifications               Notifications[]
}

model Product {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  price             Int
  category          String?
  backgroundImage   String?
  background        String?
  shortInfo         String?
  nutrientInfo      String?
  images             String
  subImages         Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  availabilityCount Int?
  servedCount       Int?     @default(0)
  userid            String   @db.ObjectId
  user              User?    @relation(fields: [userid], references: [id], onDelete: Cascade)
  Review            Review[]
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  review      Int
  description String
  productid   String   @db.ObjectId
  product     Product? @relation(fields: [productid], references: [id], onDelete: Cascade)
  userid      String   @db.ObjectId // Customer ID
  sellerId    String   @db.ObjectId // Seller ID
  user        User     @relation("UserReview", fields: [userid], references: [id])
  seller      User     @relation("SellerReviews", fields: [sellerId], references: [id])
}

model Payment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  amount         Int?
  salesamount    Int?
  currency       String
  paymentGroupId String?
  status         PaymentStatus @default(PENDING)
  userid         String        @db.ObjectId // Customer ID
  sellerId       String        @db.ObjectId // Seller ID
  user           User          @relation("UserPayments", fields: [userid], references: [id])
  seller         User          @relation("SellerPayments", fields: [sellerId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cartItems      Json?
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userid String @db.ObjectId
  user   User?  @relation(fields: [userid], references: [id], onDelete: Cascade)
}
